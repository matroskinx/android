apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.google.gms.google-services'

def keystorePropertiesFile = file('keystore.properties')
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def stream = new ByteArrayOutputStream()

exec {
    commandLine 'git', 'describe', '--tags'
    standardOutput = stream
}
def output = stream.toString()

def major = 0
def minor = 0
def patch = 0

def dash_pos = output.indexOf('-')



major = output.substring(1, output.indexOf('.')).toInteger()

if (dash_pos != -1) //есть еще коммит
{
    patch = output.substring(dash_pos + 1, output.indexOf('-', dash_pos + 1)).toInteger()
    minor = output.substring(output.indexOf('.') + 1, dash_pos).toInteger()
} else {
    minor = output.substring(output.indexOf('.') + 1).toInteger()
}


android {
    signingConfigs {
        sign_release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 28


    defaultConfig {
        applicationId "com.example.vladislav.android5"
        minSdkVersion 26
        targetSdkVersion 26
        versionCode major * 1000 + minor * 100 + patch
        versionName major.toString() + '.' + minor.toString() + '.' + patch.toString()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.sign_release

    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "${variant.applicationId}-${variant.versionName}.apk"
            }

        }
    }
    flavorDimensions "version"
    productFlavors {
        developer {
            versionNameSuffix "-dev"
            manifestPlaceholders.screenOrientation = "sensor"

        }
        master {
            manifestPlaceholders.screenOrientation = "portrait"
            applicationIdSuffix ".master"
        }
    }

    sourceSets { debug { java.srcDirs = ['src/debug/java'] } }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha2'

    //TODO ???
    //implementation 'com.android.support:support-compat:28.0.0'

    implementation "com.android.support:support-core-utils:28.0.0"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-beta02'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-beta02'
    implementation 'com.google.android.material:material:1.0.0'

    def nav_version = "1.0.0-alpha08"

    implementation "android.arch.navigation:navigation-fragment-ktx:$nav_version"
    // use -ktx for Kotlin
    implementation "android.arch.navigation:navigation-fragment-ktx:$nav_version"
    // use -ktx for Kotlin
    implementation "android.arch.navigation:navigation-ui-ktx:$nav_version" // use -ktx for Kotlin

    // optional - Test helpers
    // this library depends on the Kotlin standard library
    androidTestImplementation "android.arch.navigation:navigation-testing:$nav_version"

    implementation 'com.google.firebase:firebase-core:16.0.6'
    implementation 'com.google.firebase:firebase-storage:16.0.5'
    implementation 'com.google.firebase:firebase-auth:16.1.0'
    implementation 'com.google.firebase:firebase-database:16.0.5'
}
